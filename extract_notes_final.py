#!/usr/bin/env python3
"""
Versi√≥n final de extracci√≥n de notas - usando innerHTML de elementos li
"""
import sqlite3
import requests
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import re
import time

def extract_talk_content_static(url):
    """Extrae contenido est√°tico del discurso usando requests + BeautifulSoup"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
    }
    
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    
    soup = BeautifulSoup(response.content, 'html.parser')
    
    # Extraer t√≠tulo
    title_element = soup.find('h1')
    title = title_element.get_text(strip=True) if title_element else "Sin t√≠tulo"
    
    # Buscar informaci√≥n del autor
    author_element = (soup.find('p', class_='author-name') or 
                     soup.find('div', class_='byline') or
                     soup.find('p', string=re.compile(r'^(By|Por)\s+')) or
                     soup.find('h2'))
    
    author = ""
    if author_element:
        author = author_element.get_text(strip=True)
        author = re.sub(r'^(By|Por)\s+', '', author)
    else:
        author = "Autor no encontrado"
    
    # Buscar cargo/posici√≥n
    position_element = (soup.find('p', class_='author-role') or 
                       soup.find('div', class_='author-role') or
                       soup.find('p', class_='author-title') or 
                       soup.find('div', class_='author-title'))
    position = position_element.get_text(strip=True) if position_element else "Posici√≥n no encontrada"
    
    # Extraer contenido principal del discurso
    content_div = soup.find('div', class_='body-block') or soup.find('div', id='main-content')
    if not content_div:
        content_div = soup.find('div', class_='article-content') or soup.find('main')
    
    content = ""
    if content_div:
        for p in content_div.find_all('p'):
            content += p.get_text(strip=True) + "\n\n"
    else:
        content = "Contenido no encontrado"
    
    return {
        'title': title,
        'author': author,
        'position': position,
        'content': content.strip(),
        'url': url
    }

def extract_notes_with_selenium_final(url):
    """Extrae las notas usando innerHTML de elementos li - versi√≥n final"""
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    
    driver = webdriver.Chrome(options=chrome_options)
    notes = []
    
    try:
        print(f"üåê Cargando p√°gina: {url}")
        driver.get(url)
        
        # Esperar a que la p√°gina cargue
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )
        print("‚úÖ P√°gina cargada")
        
        # Buscar y activar el bot√≥n "Related Content"
        print("üîç Activando 'Related Content'...")
        try:
            related_content_selectors = [
                'button[data-testid="related-content"]',
                'button[aria-label*="Related"]',
                'button[title*="Related"]'
            ]
            
            activated = False
            for selector in related_content_selectors:
                try:
                    elements = driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        element = elements[0]
                        if element.is_displayed() and element.is_enabled():
                            driver.execute_script("arguments[0].click();", element)
                            print(f"‚úÖ Activado 'Related Content'")
                            activated = True
                            break
                except Exception:
                    continue
            
            if activated:
                # Esperar a que se cargue el contenido relacionado
                print("‚è≥ Esperando contenido relacionado...")
                time.sleep(5)
                
                try:
                    WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.TAG_NAME, "aside"))
                    )
                    print("‚úÖ Panel aside detectado")
                    time.sleep(3)  # Tiempo adicional para que se carguen las notas
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è No se detect√≥ panel aside: {e}")
            else:
                print("‚ö†Ô∏è No se pudo activar 'Related Content'")
        
        except Exception as e:
            print(f"‚ö†Ô∏è Error al activar Related Content: {e}")
        
        # Extraer notas de elementos li usando innerHTML
        print("üîç Extrayendo notas de elementos <li>...")
        note_li_elements = driver.find_elements(By.CSS_SELECTOR, 'li[id^="note"]')
        print(f"üìù Elementos <li> encontrados: {len(note_li_elements)}")
        
        for element in note_li_elements:
            note_id = element.get_attribute('id')
            try:
                # Obtener el innerHTML que contiene el contenido completo
                inner_html = driver.execute_script("return arguments[0].innerHTML;", element)
                
                if inner_html and inner_html.strip():
                    # Crear una instancia de BeautifulSoup para limpiar el HTML
                    soup = BeautifulSoup(inner_html, 'html.parser')
                    # Extraer solo el texto limpio
                    clean_text = soup.get_text(strip=True)
                    
                    if clean_text and len(clean_text) > 5:
                        print(f"  ‚úÖ Nota {note_id}: {clean_text[:100]}...")
                        notes.append(f"[{note_id}] {clean_text}")
                    
            except Exception as e:
                print(f"  ‚ùå Error procesando {note_id}: {e}")
        
        print(f"üìù Total notas extra√≠das: {len(notes)}")
        
    except Exception as e:
        print(f"‚ùå Error general: {e}")
    finally:
        driver.quit()
    
    return notes

def main():
    """Funci√≥n principal para probar la extracci√≥n final"""
    print("=== EXTRACCI√ìN FINAL DE NOTAS ===")
    
    url = "https://www.churchofjesuschrist.org/study/general-conference/2025/04/13holland?lang=eng"
    
    print(f"üéØ URL de prueba: {url}")
    print("-" * 60)
    
    # Extraer contenido est√°tico
    print("üìÑ Extrayendo contenido est√°tico...")
    try:
        static_data = extract_talk_content_static(url)
        
        print(f"üìã T√çTULO: {static_data['title']}")
        print(f"üë§ AUTOR: {static_data['author']}")
        print(f"üèõÔ∏è POSICI√ìN: {static_data['position']}")
        print(f"üìù CONTENIDO: {len(static_data['content'])} caracteres")
        print("-" * 60)
        
    except Exception as e:
        print(f"‚ùå Error al extraer contenido est√°tico: {e}")
        return
    
    # Extraer notas con versi√≥n final
    print("üîç Extrayendo notas (versi√≥n final)...")
    try:
        notes = extract_notes_with_selenium_final(url)
        
        if notes:
            print(f"\n‚úÖ NOTAS EXTRA√çDAS EXITOSAMENTE: {len(notes)}")
            print("=" * 60)
            for i, note in enumerate(notes, 1):
                print(f"{i:2}. {note}")
            print("=" * 60)
        else:
            print("‚ùå No se encontraron notas")
        
    except Exception as e:
        print(f"‚ùå Error al extraer notas: {e}")
    
    print("\n‚úÖ Prueba final completada")

if __name__ == "__main__":
    main()
